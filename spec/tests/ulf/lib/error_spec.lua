require("ulf.util.debug")._G()

describe("#ulf.lib.error", function()
	local error = require("ulf.lib.error")
	local Error = error.Error
	local make_message = error.make_message

	describe("make_message", function()
		it("creates an error message when fmt and args are missing", function()
			local msg = make_message({ "ulf.lib.error.object", "make_message" })

			assert.equal("[ulf.lib.error.object].make_message: ", msg)
		end)
		it("creates an error message when fmt and args are present", function()
			local msg = make_message({ "ulf.lib.error.object", "make_message" }, "invalid code '%s'", "A")

			assert.equal("[ulf.lib.error.object].make_message: invalid code 'A'", msg)
		end)
	end)

	describe("Error", function()
		describe("new", function()
			it("calling Error:new creates an Error object", function()
				local e = Error:new({ "ulf.lib.error.object", "make_message" })
				assert.equal("[ulf.lib.error.object].make_message: ", tostring(e))
			end)
			it("calling Error:new with additional args creates an Error object", function()
				local e = Error:new({ "ulf.lib.error.object", "make_message" }, "invalid code '%s'", "A")
				assert.equal("[ulf.lib.error.object].make_message: invalid code 'A'", tostring(e))
			end)
		end)
		describe("__call", function()
			it("calling Error creates an Error object", function()
				local e = Error({ "ulf.lib.error.object", "make_message" })
				assert.equal("[ulf.lib.error.object].make_message: ", tostring(e))
			end)
			it("calling Error with additional args creates an Error object", function()
				local e = Error({ "ulf.lib.error.object", "make_message" }, "invalid code '%s'", "A")
				assert.equal("[ulf.lib.error.object].make_message: invalid code 'A'", tostring(e))
			end)
		end)
	end)
end)
